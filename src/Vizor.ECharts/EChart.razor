@using Microsoft.JSInterop;
@using System.Text.Json;
@using Vizor.ECharts;

@namespace Vizor.ECharts

@inject IJSRuntime jsRuntime
@implements IAsyncDisposable

<div id="@Id" class="@CssClass" style="@Style"></div>

@code {

	[Parameter]
	public string Id { get; set; } = "chart-" + Guid.NewGuid().ToString();

	[Parameter]
	public string? CssClass { get; set; }

	[Parameter]
	public string? Style { get; set; }

	[Parameter]
	public string? Width { get; set; }

	[Parameter]
	public string? Height { get; set; }

	[Parameter]
	public string? Theme { get; set; }

	[Parameter]
	public bool NoMapping { get; set; }

	[Parameter, EditorRequired]
	public ChartOptions Options { get; set; } = default!;

	protected override Task OnInitializedAsync()
	{
		return base.OnInitializedAsync();

		//TODO: async data loaders
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		// echarts.init the very first time the component is rendered

		if (!firstRender)
			return;

		if (Options == null)
			throw new ArgumentException("Options property must be set");
		if (string.IsNullOrWhiteSpace(Id))
			throw new ArgumentException("Id property must be set");

		var jsonOpts = new JsonSerializerOptions()
			{
				PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
				DefaultIgnoreCondition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull,
#if DEBUG
					WriteIndented = true
#endif
			};

		var chartOpts = JsonSerializer.Serialize(Options, jsonOpts);

		//TODO: also pass DotNetObjectReference.Create(this) ?
		await jsRuntime.InvokeVoidAsync("vizorECharts.initChart", Id, Theme, Width, Height, chartOpts, NoMapping);
	}

	public async ValueTask DisposeAsync()
	{
		try
		{
			await jsRuntime.InvokeVoidAsync("vizorECharts.disposeChart", Id);
		}
		catch { }
	}
}
