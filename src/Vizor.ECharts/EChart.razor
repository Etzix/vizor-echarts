@using Microsoft.JSInterop;
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using System.Text;
@using Vizor.ECharts;
@using Vizor.ECharts.Internal;

@namespace Vizor.ECharts

@inherits EChartBase

<div id="@id" class="@CssClass" style="@Style"></div>

@code {


	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		// echarts.init the very first time the component is rendered

		if (!firstRender)
			return;

		if (Options == null)
			throw new ArgumentException("Options property must be set");

		// init the serializer options if required
		jsonOpts ??= CreateSerializerOptions();

		// register the chart in a group if available
		Group?.Add(this);

		// options passed to echarts.init
		var initOptions = JsonSerializer.Serialize(new
		{
			renderer = Renderer.ToJsParam(),
			width = Width,
			height = Height
		});

		if (DataLoader.HasDelegate)
		{
			// init the chart without any data
			await JSRuntime.InvokeVoidAsync("vizorECharts.initChart", id, Theme, initOptions, null /*fetchOptions*/, null /*chartOpts*/);

			// retrieve the data
			if (DataLoader.HasDelegate)
			{
				await DataLoader.InvokeAsync();
			}

			// serialize all required data
			(var chartOpts, var fetchOpts) = Serialize();

			// update the chart
			await JSRuntime.InvokeVoidAsync("vizorECharts.updateChart", id, fetchOpts, chartOpts);
		}
		else
		{
			// serialize all required data
			(var chartOpts, var fetchOpts) = Serialize();

			//TODO: also pass DotNetObjectReference.Create(this) ?
			await JSRuntime.InvokeVoidAsync("vizorECharts.initChart", id, Theme, initOptions, fetchOpts, chartOpts);
		}
	}

	public override async Task UpdateAsync(bool executeDataLoader = true)
	{
		if (executeDataLoader && DataLoader.HasDelegate)
		{
			await DataLoader.InvokeAsync();
		}

		// serialize all required data
		(var chartOpts, var fetchOpts) = Serialize();

		await JSRuntime.InvokeVoidAsync("vizorECharts.updateChart", id, fetchOpts, chartOpts);
	}
}
