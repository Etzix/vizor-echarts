@page "/example/scatter/cluster"

@using Vizor.ECharts;

<Vizor.ECharts.EChart Options="@options" Width="800px" Height="800px" />

@code {

	// see https://echarts.apache.org/examples/en/editor.html?c=scatter-clustering

	private static readonly double[][] data = new double[][] {
		new double[] { 3.275154, 2.957587 },
		new double[] { -3.344465, 2.603513 },
		new double[] { 0.355083, -3.376585 },
		new double[] { 1.852435, 3.547351 },
		new double[] { -2.078973, 2.552013 },
		new double[] { -0.993756, -0.884433 },
		new double[] { 2.682252, 4.007573 },
		new double[] { -3.087776, 2.878713 },
		new double[] { -1.565978, -1.256985 },
		new double[] { 2.441611, 0.444826 },
		new double[] { -0.659487, 3.111284 },
		new double[] { -0.459601, -2.618005 },
		new double[] { 2.17768, 2.387793 },
		new double[] { -2.920969, 2.917485 },
		new double[] { -0.028814, -4.168078 },
		new double[] { 3.625746, 2.119041 },
		new double[] { -3.912363, 1.325108 },
		new double[] { -0.551694, -2.814223 },
		new double[] { 2.855808, 3.483301 },
		new double[] { -3.594448, 2.856651 },
		new double[] { 0.421993, -2.372646 },
		new double[] { 1.650821, 3.407572 },
		new double[] { -2.082902, 3.384412 },
		new double[] { -0.718809, -2.492514 },
		new double[] { 4.513623, 3.841029 },
		new double[] { -4.822011, 4.607049 },
		new double[] { -0.656297, -1.449872 },
		new double[] { 1.919901, 4.439368 },
		new double[] { -3.287749, 3.918836 },
		new double[] { -1.576936, -2.977622 },
		new double[] { 3.598143, 1.97597 },
		new double[] { -3.977329, 4.900932 },
		new double[] { -1.79108, -2.184517 },
		new double[] { 3.914654, 3.559303 },
		new double[] { -1.910108, 4.166946 },
		new double[] { -1.226597, -3.317889 },
		new double[] { 1.148946, 3.345138 },
		new double[] { -2.113864, 3.548172 },
		new double[] { 0.845762, -3.589788 },
		new double[] { 2.629062, 3.535831 },
		new double[] { -1.640717, 2.990517 },
		new double[] { -1.881012, -2.485405 },
		new double[] { 4.606999, 3.510312 },
		new double[] { -4.366462, 4.023316 },
		new double[] { 0.765015, -3.00127 },
		new double[] { 3.121904, 2.173988 },
		new double[] { -4.025139, 4.65231 },
		new double[] { -0.559558, -3.840539 },
		new double[] { 4.376754, 4.863579 },
		new double[] { -1.874308, 4.032237 },
		new double[] { -0.089337, -3.026809 },
		new double[] { 3.997787, 2.518662 },
		new double[] { -3.082978, 2.884822 },
		new double[] { 0.845235, -3.454465 },
		new double[] { 1.327224, 3.358778 },
		new double[] { -2.889949, 3.596178 },
		new double[] { -0.966018, -2.839827 },
		new double[] { 2.960769, 3.079555 },
		new double[] { -3.275518, 1.577068 },
		new double[] { 0.639276, -3.41284 }
	};
	private const int ClusterCount = 6;
	private const int ClusterIndex = 2;
	private static readonly string[] Colors = new string[] { "#37A2DA", "#e06343", "#37a354", "#b55dba", "#b5bd48", "#8378EA", "#96BFFF" };

	// TODO: echarts.registerTransform(ecStat.transform.clustering);

	private ChartOptions options = new()
		{
			Dataset = new()
			{
				Source = data, //TODO: this should be in a child object ??
				//TODO: transform
				/*
				 * {
      transform: {
        type: 'ecStat:clustering',
        // print: true,
        config: {
          clusterCount: CLUSTER_COUNT,
          outputType: 'single',
          outputClusterIndexDimension: DIENSIION_CLUSTER_INDEX
        }
      }
    }
				 */
			},
			XAxis = new() { },
			YAxis = new() { },
			Tooltip = new()
			{
				Position = TooltipPositionType.Top
			},
			VisualMap = new List<object>()
			{
				new PiecewiseVisualMap()
				{
					Top = "middle",
					Min = 0,
					Max = ClusterCount,
					Left = 10,
					SplitNumber = ClusterCount,
					Dimension = ClusterIndex,
					Pieces = GetPieces()
				}
			},
			Grid = new()
			{
				Left = 120
			},
			Series = new List<object>()
			{
				new ScatterSeries()
				{
					Encode = new()
					{
						//TODO: tooltip: [0, 1]
					},
					SymbolSize = 15,
					ItemStyle = new()
					{
						BorderColor = "#555"
					},
					DatasetIndex = 1
				}
			}
		};

	private static List<VisualMapPiece> GetPieces()
	{
		var result = new List<VisualMapPiece>();

		for (var i = 0; i < ClusterCount; i++)
		{
			result.Add(new VisualMapPiece()
			{
				Value = i,
				Label = $"cluster {i}",
				Color = Colors[i]
			});
		}

		return result;
	}
}